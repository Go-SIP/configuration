apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: token-refresher
    app.kubernetes.io/name: token-refresher
  name: token-refresher
  namespace: observatorium
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: token-refresher
      app.kubernetes.io/name: token-refresher
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: token-refresher
        app.kubernetes.io/name: token-refresher
    spec:
      containers:
      - args:
        - --log.level=debug
        - --log.format=logfmt
        - --web.listen=0.0.0.0:8080
        - --web.internal.listen=0.0.0.0:8081
        - --oidc.audience=$(OIDC_AUDIENCE)
        - --oidc.client-id=$(OIDC_CLIENT_ID)
        - --oidc.client-secret=$(OIDC_CLIENT_SECRET)
        - --oidc.issuer-url=$(OIDC_ISSUER_URL)
        - --url=http://observatorium-xyz-observatorium-api.observatorium.svc.cluster.local:8080
        env:
        - name: OIDC_AUDIENCE
          valueFrom:
            secretKeyRef:
              key: audience
              name: token-refresher-oidc
        - name: OIDC_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: clientId
              name: token-refresher-oidc
        - name: OIDC_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: clientSecret
              name: token-refresher-oidc
        - name: OIDC_ISSUER_URL
          valueFrom:
            secretKeyRef:
              key: issuerUrl
              name: token-refresher-oidc
        image: quay.io/observatorium/token-refresher
        imagePullPolicy: IfNotPresent
        name: token-refresher
        ports:
        - containerPort: 8081
          name: internal
          protocol: TCP
        - containerPort: 8080
          name: web
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30