apiVersion: v1
kind: Template
metadata:
  name: observatorium-prometheus
objects:
- apiVersion: v1
  data:
    nginx.conf: |
      daemon off;
      worker_processes 1;
      error_log /dev/stderr;
      pid /tmp/nginx.pid;

      events {
          worker_connections 1024;
      }

      http {
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        server {
          listen *:8080;
          server_name _;
          access_log  /dev/stdout  main;
          error_log /dev/stderr;

          location / {
            proxy_set_header THANOS-TENANT FB870BF3-9F3A-44FF-9BF7-D7A047A52F43;
            proxy_pass http://thanos-receive.${NAMESPACE}.svc.cluster.local:19291;
          }
        }
      }
  kind: ConfigMap
  metadata:
    labels:
      app.kubernetes.io/instance: remote-write-proxy
      app.kubernetes.io/name: nginx
      app.kubernetes.io/part-of: prometheus-ams
    name: prometheus-remote-write-proxy-config
    namespace: ${NAMESPACE}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/instance: remote-write-proxy
      app.kubernetes.io/name: nginx
      app.kubernetes.io/part-of: prometheus-ams
    name: prometheus-remote-write-proxy
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: remote-write-proxy
        app.kubernetes.io/name: nginx
    template:
      metadata:
        labels:
          app.kubernetes.io/instance: remote-write-proxy
          app.kubernetes.io/name: nginx
      spec:
        containers:
        - args:
          - -c
          - /config/nginx.conf
          command:
          - nginx
          image: ${PROMETHEUS_AMS_REMOTE_WRITE_PROXY_IMAGE}:${PROMETHEUS_AMS_REMOTE_WRITE_PROXY_VERSION}
          name: remote-write-proxy
          ports:
          - containerPort: 8080
            name: http
          resources:
            limits:
              cpu: 100m
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 16Mi
          volumeMounts:
          - mountPath: /config
            name: prometheus-remote-write-proxy-config
            readOnly: true
        volumes:
        - configMap:
            name: prometheus-remote-write-proxy-config
          name: prometheus-remote-write-proxy-config
- apiVersion: monitoring.coreos.com/v1
  kind: Prometheus
  metadata:
    labels:
      app.kubernetes.io/instance: ams
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus-ams
      prometheus: ams
    name: ams
    namespace: ${NAMESPACE}
  spec:
    baseImage: ${PROMETHEUS_AMS_IMAGE}
    containers: []
    remoteWrite:
    - url: http://prometheus-ams-remote-write-proxy.${NAMESPACE}.svc.cluster.local:8080/api/v1/receive
      writeRelabelConfigs:
      - action: keep
        regex: subscription_labels
        sourceLabels:
        - __name__
    replicas: 1
    resources:
      limits:
        cpu: ${PROMETHEUS_AMS_CPU_LIMIT}
        memory: ${PROMETHEUS_AMS_MEMORY_LIMIT}
      requests:
        cpu: ${PROMETHEUS_AMS_CPU_REQUEST}
        memory: ${PROMETHEUS_AMS_MEMORY_REQUEST}
    ruleSelector:
      matchLabels:
        prometheus: ams
        role: alert-rules
    securityContext: {}
    serviceAccount: prometheus-telemeter
    serviceAccountName: prometheus-telemeter
    serviceMonitorSelector:
      matchLabels:
        prometheus: ams
    version: ${PROMETHEUS_AMS_IMAGE_TAG}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/instance: remote-write-proxy
      app.kubernetes.io/name: nginx
      app.kubernetes.io/part-of: prometheus-ams
    name: prometheus-ams-remote-write-proxy
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: http
      port: 8080
      targetPort: http
    selector:
      app.kubernetes.io/instance: remote-write-proxy
      app.kubernetes.io/name: nginx
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/instance: ams
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus-ams
      prometheus: ams
    name: prometheus-ams
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: web
      port: 9090
      targetPort: web
    selector:
      prometheus: ams
    sessionAffinity: ClientIP
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/instance: ams
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus-ams
    name: prometheus-ams
    namespace: ${NAMESPACE}
  spec:
    endpoints:
    - interval: 30s
      port: web
    selector:
      matchLabels:
        app.kubernetes.io/instance: ams
        app.kubernetes.io/name: prometheus
parameters:
- name: PROMETHEUS_AMS_REMOTE_WRITE_PROXY_IMAGE
  value: quay.io/app-sre/observatorium-receive-proxy
- name: PROMETHEUS_AMS_REMOTE_WRITE_PROXY_VERSION
  value: 14e844d
- name: PROMETHEUS_AMS_IMAGE
  value: quay.io/prometheus/prometheus
- name: PROMETHEUS_AMS_IMAGE_TAG
  value: v2.12.0
- name: PROMETHEUS_AMS_CPU_REQUEST
  value: "0"
- name: PROMETHEUS_AMS_CPU_LIMIT
  value: "0"
- name: PROMETHEUS_AMS_MEMORY_REQUEST
  value: "0"
- name: PROMETHEUS_AMS_MEMORY_LIMIT
  value: "0"
- name: NAMESPACE
  value: observatorium
